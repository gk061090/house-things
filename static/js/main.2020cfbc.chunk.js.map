{"version":3,"sources":["Images.tsx","serviceWorker.ts","index.tsx"],"names":["Images","useState","uploads","setUploads","images","setImages","useEffect","console","log","baseUrl","type","className","onClick","window","cloudinary","createUploadWidget","cloudName","uploadPreset","folder","error","result","event","prevImages","id","info","asset_id","thumbnail","thumbnail_url","source","secure_url","open","a","fetch","method","headers","Accept","token","body","JSON","stringify","title","description","rawResponse","json","content","response","ok","Error","data","map","_id","key","image","src","alt","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"mMAEaA,EAAS,WAAO,IAAD,EACIC,mBAAS,IADb,mBACnBC,EADmB,KACVC,EADU,OAEEF,mBAAS,IAFX,mBAEnBG,EAFmB,KAEXC,EAFW,KAI1BC,qBAAU,WACRC,QAAQC,IAAIN,KACX,CAACA,IAEJI,qBAAU,WACRC,QAAQC,IAAIJ,KACX,CAACA,IAEJ,IAwBMK,EAAU,sDAwChB,OACE,oCAEE,4BAAQC,KAAK,SAASC,UAAU,iBAAiBC,QAnElC,WACDC,OAAeC,WAAWC,mBACxC,CACEC,UAAW,WACXC,aAAc,WACdC,OAAQ,iBAEV,SAACC,EAAYC,GACU,YAAjBA,EAAOC,OACTlB,GAAW,SAACmB,GAAD,4BACNA,GADM,CAET,CACEC,GAAIH,EAAOI,KAAKC,SAChBC,UAAWN,EAAOI,KAAKG,cACvBC,OAAQR,EAAOI,KAAKK,oBAMvBC,SA+CL,qBAGA,4BAAQpB,KAAK,SAASE,QA5Cb,WACX,sBAAC,8BAAAmB,EAAA,sEAC2BC,MAAMvB,EAAS,CACvCwB,OAAQ,OACRC,QAAS,CACPC,OAAQ,mBACR,eAAgB,mBAChBC,MAVM,SAYRC,KAAMC,KAAKC,UAAU,CACnBC,MAAO,EACPC,YAAa,kBACbrC,OAAQF,MAXb,cACOwC,EADP,gBAcuBA,EAAYC,OAdnC,OAcOC,EAdP,OAgBCrC,QAAQC,IAAIoC,GAhBb,0CAAD,KA2CE,QAGA,4BAAQlC,KAAK,SAASE,QA1Bd,WACV,sBAAC,8BAAAmB,EAAA,+EAE0BC,MAAMvB,EAAS,CAAEyB,QAAS,CAAEE,MA3B3C,WAyBX,WAESS,EAFT,QAGiBC,GAHjB,sBAIW,IAAIC,MAAM,kBAJrB,uBAMsBF,EAASF,OAN/B,OAMSK,EANT,OAQG3C,EAAU2C,GARb,kDAWGzC,QAAQC,IAAR,MAXH,yDAAD,KAyBE,OAGCJ,EAAO6C,KAAI,gBAAG7C,EAAH,EAAGA,OAAQ8C,EAAX,EAAWA,IAAX,OACV,yBAAKC,IAAKD,GACP9C,EAAO6C,KAAI,SAACG,EAAY7B,GAAb,OACV,yBAAK4B,IAAK5B,EAAI8B,IAAKD,EAAM1B,UAAW4B,IAAI,cCjFhCC,QACW,cAA7B1C,OAAO2C,SAASC,UAEe,UAA7B5C,OAAO2C,SAASC,UAEhB5C,OAAO2C,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnD,GACLZ,QAAQY,MAAMA,EAAMoD,a","file":"static/js/main.2020cfbc.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nexport const Images = () => {\n  const [uploads, setUploads] = useState([]) as any;\n  const [images, setImages] = useState([]) as any;\n\n  useEffect(() => {\n    console.log(uploads);\n  }, [uploads]);\n\n  useEffect(() => {\n    console.log(images);\n  }, [images]);\n\n  const openWidget = () => {\n    const widget = (window as any).cloudinary.createUploadWidget(\n      {\n        cloudName: \"gk061090\",\n        uploadPreset: \"zptu6x1e\",\n        folder: \"house/things\",\n      },\n      (error: any, result: any) => {\n        if (result.event === \"success\") {\n          setUploads((prevImages: any) => [\n            ...prevImages,\n            {\n              id: result.info.asset_id,\n              thumbnail: result.info.thumbnail_url,\n              source: result.info.secure_url,\n            },\n          ]);\n        }\n      }\n    );\n    widget.open();\n  };\n\n  const token = \"house\";\n  const baseUrl = \"http://localhost:9000/.netlify/functions/api/things\";\n\n  const send = () => {\n    (async () => {\n      const rawResponse = await fetch(baseUrl, {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          token,\n        },\n        body: JSON.stringify({\n          title: 1,\n          description: \"Textual content\",\n          images: uploads,\n        }),\n      });\n      const content = await rawResponse.json();\n\n      console.log(content);\n    })();\n  };\n\n  const get = () => {\n    (async () => {\n      try {\n        const response = await fetch(baseUrl, { headers: { token } as any });\n        if (!response.ok) {\n          throw new Error(\"Sanya hui sosi\");\n        }\n        const data = await response.json();\n\n        setImages(data);\n        // console.log(data.map((post: any) => post.title));\n      } catch (error) {\n        console.log(error);\n      }\n    })();\n  };\n\n  return (\n    <>\n      {/* <div>{JSON.stringify(image)}</div> */}\n      <button type=\"button\" className=\"btn widget-btn\" onClick={openWidget}>\n        Upload Via Widget\n      </button>\n      <button type=\"button\" onClick={send}>\n        Send\n      </button>\n      <button type=\"button\" onClick={get}>\n        Get\n      </button>\n      {images.map(({ images, _id }: any) => (\n        <div key={_id}>\n          {images.map((image: any, id: string) => (\n            <img key={id} src={image.thumbnail} alt=\"\" />\n          ))}\n        </div>\n      ))}\n    </>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import App from \"./App\";\n// import RouterExample from \"./RouterExample\";\nimport { Images } from \"./Images\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Images />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}