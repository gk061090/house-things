{"version":3,"sources":["Images.tsx","utils/compress.ts","Form.tsx","utils/api.ts","serviceWorker.ts","index.tsx"],"names":["Images","useState","uploads","setUploads","things","setThings","useEffect","console","log","baseUrl","type","className","onClick","window","cloudinary","createUploadWidget","cloudName","uploadPreset","folder","error","result","event","prevImages","id","info","asset_id","thumbnail","thumbnail_url","source","secure_url","open","a","fetch","method","headers","Accept","token","body","JSON","stringify","title","description","images","rawResponse","json","content","response","ok","Error","data","map","_id","key","image","index","src","alt","convertFileToBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","e","target","onerror","compress","imageFile","options","maxSizeMB","maxWidthOrHeight","useWebWorker","imageCompression","compressedFile","base64","Form","setTitle","setDescription","files","setFiles","isSendButtonEnabled","setIsSendButtonEnabled","originalLength","setOriginalLength","compressedLength","setCompressedLength","length","handleChange","uploadFiles","filesArray","Array","from","forEach","base64CompressedFile","prev","slice","noValidate","autoComplete","TextField","label","variant","value","onChange","multiline","accept","style","display","multiple","htmlFor","Button","color","component","maxWidth","preventDefault","send","disabled","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.afb5b077.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\ninterface IImage {\n  id: string;\n  source: string;\n  thumbnail: string;\n}\n\ninterface IUpload {\n  title: string;\n  description: string;\n  date: Date;\n  images: Array<IImage>;\n}\n\nexport const Images = () => {\n  const [uploads, setUploads] = useState<IUpload[]>([]) as any;\n  const [things, setThings] = useState<IImage[]>([]);\n\n  useEffect(() => {\n    console.log(uploads);\n  }, [uploads]);\n\n  useEffect(() => {\n    console.log(things);\n  }, [things]);\n\n  const openWidget = () => {\n    const widget = (window as any).cloudinary.createUploadWidget(\n      {\n        cloudName: \"gk061090\",\n        uploadPreset: \"zptu6x1e\",\n        folder: \"house/things\",\n      },\n      (error: any, result: any) => {\n        if (result.event === \"success\") {\n          setUploads((prevImages: [IImage]) => [\n            ...prevImages,\n            {\n              id: result.info.asset_id,\n              thumbnail: result.info.thumbnail_url,\n              source: result.info.secure_url,\n            },\n          ]);\n        }\n      }\n    );\n    widget.open();\n  };\n\n  const token = \"house\";\n  // const baseUrl = \"http://localhost:9000/.netlify/functions/api/things\";\n  const baseUrl = \"https://house-api.netlify.app/.netlify/functions/api/things\";\n\n  const send = () => {\n    (async () => {\n      const rawResponse = await fetch(baseUrl, {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          token,\n        },\n        body: JSON.stringify({\n          title: 1,\n          description: \"Textual content\",\n          images: uploads,\n        }),\n      });\n      const content = await rawResponse.json();\n\n      console.log(content);\n    })();\n  };\n\n  const get = () => {\n    (async () => {\n      try {\n        const response = await fetch(baseUrl, { headers: { token } as any });\n        if (!response.ok) {\n          throw new Error(\"Response error\");\n        }\n        const data = await response.json();\n\n        setThings(data);\n      } catch (error) {\n        console.log(error);\n      }\n    })();\n  };\n\n  return (\n    <>\n      <button type=\"button\" className=\"btn widget-btn\" onClick={openWidget}>\n        Upload Via Widget\n      </button>\n      <button type=\"button\" onClick={send}>\n        Send\n      </button>\n      <button type=\"button\" onClick={get}>\n        Get\n      </button>\n      {things.map(({ _id, title, description, images }: any) => (\n        <div key={_id}>\n          <p>{title}</p>\n          <p>{description}</p>\n          {images.map((image: any, index: number) => (\n            <img key={index} src={\"data:image/png;base64\" + image} alt=\"\" />\n          ))}\n          <hr />\n        </div>\n      ))}\n    </>\n  );\n};\n","import imageCompression from \"browser-image-compression\";\n\nexport const convertFileToBase64 = async (file: File | Blob) =>\n  new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.readAsDataURL(file);\n\n    reader.onload = (e) => {\n      resolve(e.target?.result);\n    };\n\n    reader.onerror = () => {\n      reject(new Error(\"Error\"));\n    };\n  });\n\nexport const compress = async (imageFile: File | Blob) => {\n  const options = {\n    maxSizeMB: 0.1,\n    maxWidthOrHeight: 400,\n    useWebWorker: true,\n  };\n  try {\n    const compressedFile = await imageCompression(imageFile, options);\n    const base64 = await convertFileToBase64(compressedFile);\n    return base64;\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import React, { useState, useEffect, FormEvent } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport { compress } from \"./utils\";\nimport { send } from \"./utils/api\";\n\nexport const Form = () => {\n  const [title, setTitle] = useState<string>(\"\");\n  const [description, setDescription] = useState<string>(\"\");\n  const [files, setFiles] = useState<Array<string>>([]);\n\n  const [isSendButtonEnabled, setIsSendButtonEnabled] = useState(false);\n  const [originalLength, setOriginalLength] = useState(0);\n  const [compressedLength, setCompressedLength] = useState(0);\n\n  useEffect(() => {\n    setIsSendButtonEnabled(\n      files.length > 0 && files.length === originalLength + compressedLength\n    );\n  }, [compressedLength, files, originalLength]);\n\n  const handleChange = async (uploadFiles: FileList | null) => {\n    if (!uploadFiles) {\n      setIsSendButtonEnabled(true);\n      return;\n    }\n\n    setIsSendButtonEnabled(false);\n    const filesArray = Array.from(uploadFiles);\n\n    setOriginalLength(filesArray.length);\n    setCompressedLength(files.length);\n\n    filesArray.forEach(async (file, index) => {\n      const base64CompressedFile = await compress(file);\n      setFiles((prev: any) => [\n        ...prev.slice(0, index),\n        base64CompressedFile,\n        ...prev.slice(index),\n      ]);\n    });\n  };\n\n  const submit = (event: any) => {\n    event.preventDefault();\n\n    send({ title, description, images: files });\n\n    setTitle(\"\");\n    setDescription(\"\");\n    setFiles([]);\n  };\n\n  return (\n    <>\n      <form noValidate autoComplete=\"off\">\n        <TextField\n          id=\"title\"\n          label=\"Название\"\n          variant=\"outlined\"\n          value={title}\n          onChange={(event) => setTitle(event.target.value)}\n        />\n        <TextField\n          id=\"description\"\n          label=\"Описание\"\n          variant=\"outlined\"\n          multiline\n          value={description}\n          onChange={(event) => setDescription(event.target.value)}\n        />\n        <div>\n          <input\n            accept=\"image/*\"\n            id=\"upload-file\"\n            style={{ display: \"none\" }}\n            multiple\n            type=\"file\"\n            onChange={(event) => handleChange(event.target.files)}\n          />\n          <label htmlFor=\"upload-file\">\n            <Button variant=\"contained\" color=\"primary\" component=\"span\">\n              Upload\n            </Button>\n          </label>\n        </div>\n        <div>\n          {files.map((file: any, index: any) => {\n            return (\n              <img\n                key={index}\n                src={\"data:image/png;base64\" + file}\n                alt=\"\"\n                style={{ maxWidth: 150 }}\n              />\n            );\n          })}\n        </div>\n        <Button\n          type=\"submit\"\n          color=\"secondary\"\n          onClick={submit}\n          disabled={!isSendButtonEnabled}\n        >\n          Send\n        </Button>\n      </form>\n    </>\n  );\n};\n","interface ISend {\n  title: string;\n  description: string;\n  images: Array<string>;\n}\n\nexport const send = ({ title, description, images }: ISend) => {\n  const token = \"house\";\n  // const baseUrl = \"http://localhost:9000/.netlify/functions/api/things\";\n  const baseUrl = \"https://house-api.netlify.app/.netlify/functions/api/things\";\n  (async () => {\n    const rawResponse = await fetch(baseUrl, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        token,\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        images,\n      }),\n    });\n    const content = await rawResponse.json();\n\n    console.log(content);\n  })();\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import App from \"./App\";\n// import RouterExample from \"./RouterExample\";\nimport { Images } from \"./Images\";\nimport { Form } from \"./Form\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <>\n      <Form />\n      <Images />\n    </>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}