{"version":3,"sources":["RouterExample.tsx","serviceWorker.ts","index.tsx"],"names":["NestingExample","to","exact","path","Home","Topics","useState","posts","setPosts","useEffect","a","token","Cookie","get","params","headers","fetch","response","ok","Error","json","data","map","post","title","console","log","prompt","set","key","useRouteMatch","url","Topic","topicId","useParams","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iQAoBe,SAASA,IACtB,OACE,kBAAC,IAAD,KACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,WAAT,YAIJ,6BAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,WACV,kBAACE,EAAD,UAQZ,SAASD,IAAQ,IAAD,EACYE,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,KAuBd,OArBAC,qBAAU,WACR,sBAAC,oCAAAC,EAAA,6DACOC,EAAQC,IAAOC,IAAI,SACT,sDACVC,EAAS,CAAEC,QAAS,CAAEJ,UAH7B,kBAK0BK,MAHT,sDAGwBF,GALzC,WAKSG,EALT,QAMiBC,GANjB,sBAOW,IAAIC,MAAM,kBAPrB,wBASsBF,EAASG,OAT/B,QASSC,EATT,OAUGb,EAASa,EAAKC,KAAI,SAACC,GAAD,OAA6BA,EAAKC,UAVvD,kDAYGC,QAAQC,IAAR,OACMf,EAAQgB,OAAO,qFAEnBf,IAAOgB,IAAI,QAASjB,GAfzB,yDAAD,KAmBC,IAED,6BACE,oCACCJ,EAAMe,KAAI,SAACC,GAAD,OACT,uBAAGM,IAAKN,GAAOA,OAMvB,SAASlB,IAAS,MAIIyB,cAAd3B,EAJU,EAIVA,KAAM4B,EAJI,EAIJA,IAEZ,OACE,6BACE,sCACA,4BACE,4BACE,kBAAC,IAAD,CAAM9B,GAAE,UAAK8B,EAAL,eAAR,yBAEF,4BACE,kBAAC,IAAD,CAAM9B,GAAE,UAAK8B,EAAL,gBAAR,eAEF,4BACE,kBAAC,IAAD,CAAM9B,GAAE,UAAK8B,EAAL,mBAAR,oBAIJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO7B,OAAK,EAACC,KAAMA,GACjB,uDAEF,kBAAC,IAAD,CAAOA,KAAI,UAAKA,EAAL,cACT,kBAAC6B,EAAD,SAWV,SAASA,IAAQ,IAKTC,EAAYC,cAAZD,QAEN,OACE,6BACE,4BAAKA,ICnHSE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.38046696.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useParams,\n  useRouteMatch,\n} from \"react-router-dom\";\nimport Cookie from \"js-cookie\";\n\n// Since routes are regular React components, they\n// may be rendered anywhere in the app, including in\n// child elements.\n//\n// This helps when it's time to code-split your app\n// into multiple bundles because code-splitting a\n// React Router app is the same as code-splitting\n// any other React app.\n\nexport default function NestingExample() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/topics\">Topics</Link>\n          </li>\n        </ul>\n\n        <hr />\n\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/topics\">\n            <Topics />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction Home() {\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    (async () => {\n      const token = Cookie.get(\"token\");\n      const baseUrl = \"http://localhost:9000/.netlify/functions/api/things\";\n      const params = { headers: { token } };\n      try {\n        const response = await fetch(baseUrl, params as any);\n        if (!response.ok) {\n          throw new Error(\"Sanya hui sosi\");\n        }\n        const data = await response.json();\n        setPosts(data.map((post: { title: string }) => post.title));\n      } catch (error) {\n        console.log(error);\n        const token = prompt(\"Введите пароль\");\n        if (!!token) {\n          Cookie.set(\"token\", token);\n        }\n      }\n    })();\n  }, []);\n  return (\n    <div>\n      <h2>Home</h2>\n      {posts.map((post) => (\n        <p key={post}>{post}</p>\n      ))}\n    </div>\n  );\n}\n\nfunction Topics() {\n  // The `path` lets us build <Route> paths that are\n  // relative to the parent route, while the `url` lets\n  // us build relative links.\n  let { path, url } = useRouteMatch();\n\n  return (\n    <div>\n      <h2>Topics</h2>\n      <ul>\n        <li>\n          <Link to={`${url}/rendering`}>Rendering with React</Link>\n        </li>\n        <li>\n          <Link to={`${url}/components`}>Components</Link>\n        </li>\n        <li>\n          <Link to={`${url}/props-v-state`}>Props v. State</Link>\n        </li>\n      </ul>\n\n      <Switch>\n        <Route exact path={path}>\n          <h3>Please select a topic.</h3>\n        </Route>\n        <Route path={`${path}/:topicId`}>\n          <Topic />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\ninterface topicId {\n  topicId: string;\n}\n\nfunction Topic() {\n  // The <Route> that rendered this component has a\n  // path of `/topics/:topicId`. The `:topicId` portion\n  // of the URL indicates a placeholder that we can\n  // get from `useParams()`.\n  let { topicId } = useParams<topicId>();\n\n  return (\n    <div>\n      <h3>{topicId}</h3>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport RouterExample from \"./RouterExample\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RouterExample />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}